Cool {
    Program = (ClassStatement ";")+
    ClassStatement = class typeIdentifier inherits typeIdentifier "{" (Feature ";")* "}" -- WithParent
                   | class typeIdentifier "{" (Feature ";")* "}" -- WithoutParent

    Feature = Attribute | Method
    Attribute = objectIdentifier ":" typeIdentifier "<-" Expr -- WithInit
              | objectIdentifier ":" typeIdentifier -- WithoutInit
    Method = objectIdentifier "(" ListOf<Formal,","> ")" ":" typeIdentifier "{" Expr "}"
    Formal = objectIdentifier ":" typeIdentifier

    Expr = AssigmentExpression
            |  NotExpression 
            | ComparisonExpr
         
     
    AssigmentExpression = objectIdentifier "<-" Expr
    
    NotExpression = not Expr
    
    ComparisonExpr = AdditiveExpr "<" AdditiveExpr -- LessThan
         | AdditiveExpr "<=" AdditiveExpr -- LessThanOrEqual
         | AdditiveExpr "=" AdditiveExpr -- Equal
         | AdditiveExpr


    AdditiveExpr = AdditiveExpr "+" MultiplicativeExpression -- Addition
                | AdditiveExpr "-" MultiplicativeExpression -- Subtraction
                | MultiplicativeExpression

    MultiplicativeExpression = MultiplicativeExpression "*" UnaryExpr -- Multiplication
                             | MultiplicativeExpression "/" UnaryExpr -- Division
                             | UnaryExpr
                             
    UnaryExpr = IsVoidExpression
                       | Negation
                       | DispatchExpression
    
    IsVoidExpression = isvoid DispatchExpression

    Negation = "~" DispatchExpression

    DispatchExpression = DispatchExpression "." objectIdentifier "(" ListOf<Expr,","> ")" -- Dynamic
                       | objectIdentifier "(" ListOf<Expr,","> ")" -- DynamicNoCaller
                       | DispatchExpression "@" typeIdentifier "." objectIdentifier "(" ListOf<Expr,","> ")" -- Static
                       | OtherExpression

    

    OtherExpression = IfExpression
                    | WhileExpression
                    | BlockExpression
                    | LetExpression
                    | CaseExpression
                    | NewExpression
                    | "(" Expr ")" -- parenthesized
                    | IntegerConst
                    | StringConst
                    | BooleanConst
                    | ObjectId

    ObjectId = objectIdentifier

    BooleanConst = booleanLiteral

    StringConst = stringLiteral

    IntegerConst = integerLiteral


    IfExpression = if Expr then Expr else Expr fi

    WhileExpression = while Expr loop Expr pool

    BlockExpression = "{" (Expr ";")+ "}"

    LetExpression = let LetAux

    LetAux = objectIdentifier ":" typeIdentifier "<-" Expr in Expr -- finalWithInit
           | objectIdentifier ":" typeIdentifier in Expr -- finalWithoutInit
           | objectIdentifier ":" typeIdentifier "<-" Expr "," LetAux -- midWithInit
           | objectIdentifier ":" typeIdentifier "," LetAux -- midWithoutInit

    CaseExpression = case Expr of (Branch ";")+ esac
    Branch = objectIdentifier ":" typeIdentifier "=>" Expr 

    NewExpression = new typeIdentifier

    space := "\x20" | "\x09".."\x0D" | comment -- comment
    comment = singlelineComment | multilineComment
    singlelineComment = "--" (~lineTerminator any)*
    multilineCommentChar = ~("(*" | "*)") any
    multilineComment = "(*" (multilineCommentChar | multilineComment)* "*)"

    booleanLiteral = true | false

    integerLiteral = digit+

    stringLiteral = "\"" stringChar* "\""
    stringSingleChar = ~("\x00" | "\"") any
    stringChar = ~("\"" | "\\" | lineTerminator) ~("\x00" | "\"") any -- nonEscaped
               | "\\" ~(lineTerminator) ~("\x00") any -- escaped
               | "\\" lineTerminator -- lineContinuation
    lineTerminator = "\n" | "\r\n"

    objectIdentifier (object identifier) = ~keyword lower identifierPart*
    typeIdentifier (type identifier) = ~keyword upper identifierPart*
    identifierPart = (letter | digit | "_")

    keyword = (class | else | false | fi | if | in | inherits | isvoid | let | loop | pool | then | while | case | esac | new | of | not | true)
    class = caseInsensitive<"class"> ~identifierPart
    else = caseInsensitive<"else"> ~identifierPart
    false = caseInsensitive<"false"> ~identifierPart
    fi = caseInsensitive<"fi"> ~identifierPart
    if = caseInsensitive<"if"> ~identifierPart
    in = caseInsensitive<"in"> ~identifierPart
    inherits = caseInsensitive<"inherits"> ~identifierPart
    isvoid = caseInsensitive<"isvoid"> ~identifierPart
    let = caseInsensitive<"let"> ~identifierPart
    loop = caseInsensitive<"loop"> ~identifierPart
    pool = caseInsensitive<"pool"> ~identifierPart
    then = caseInsensitive<"then"> ~identifierPart
    while = caseInsensitive<"while"> ~identifierPart
    case = caseInsensitive<"case"> ~identifierPart
    esac = caseInsensitive<"esac"> ~identifierPart
    new = caseInsensitive<"new"> ~identifierPart
    of = caseInsensitive<"of"> ~identifierPart
    not = caseInsensitive<"not"> ~identifierPart
    true = caseInsensitive<"true"> ~identifierPart
}