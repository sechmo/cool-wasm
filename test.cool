(*class TestClass inherits IO {
  someProp: IO <- out_string("testing"); 
  heyAnAttr: Int <- 32 + 21;
  aMethod(): TestClass {
    self
  };

  retInt(): Int {
    heyAnAttr
  };

  testLoop(someProp: Int): Int {
    let v: Int <- ~1, c: Int <- 0 in {
      while c < someProp loop 
        {c <- c + 1; v <- v * 2;}
      pool;
      v;
    }
  };
};

class X {};

class A inherits IO {
  testMeth(): Object {
    {
      out_string("testMeth.A");
      testMeth();
    }
  };

  retStr(): String {
    "A"
  };
};
class B inherits A {
  testMeth(): Object {
    out_string("testMeth.B")
  };
  retStr(): String {
    "BB"
  };
};


class C inherits B {


  retStr(): String {
    "CCC"
  };
  testMeth(): Object {
    out_string("testMeth.C")
  };
  testLet(a: A, b: B, c: C, x: Int, s: String): Int {
    let a: Int <- x, x: String <- s in 
      {
        out_string(x);
        a;
      }
  };
  str1(): String {
    "xy"
  };
  str2(): String {
    "x".concat("y")
  };
};

class Main inherits IO{
  propI: Int <- 10;
  propS: String <- "Test";
  propNoInit: C;
  defaultStr: String;
  defaultInt: Int;
  defaultBool: Bool;
  main(): Int {
    {"constant string";
    42; 
    propI; 
    -- out_int(20/3);
    8 + 19; 
    10 - 20; 
    20 * 15; 
    3 / 2;
    ~ 24 / 32 + 1 * (42 - ~ 9); -- 51
    if propI < 10 then 1 else 0 fi;  -- 0
    if propI <= 10 then 1 else 0 fi; -- 1
    if not 1 < ~1 then 1 else 0 fi; -- 1
    if not 1 <= 1 then 1 else 0 fi; -- 0
    if true then 1 else 0 fi; -- 1
    if false then 0 else 1 fi; -- 1
    new TestClass;
    new Int; -- 0
    if new Bool then 0 else 1 fi; -- 1
    (new C)@A.testMeth(); -- this should print first "testMeth.A" and then "testMeth.C"
    (new TestClass).retInt();
    let x: Int <- 999 in let propI: Int <- x in propI;
    let c: C <- new C in let c: Int <- c.testLet(c,c,c, 80, type_name()) in {c<- 99; c; }; -- should print "Main" and return 99
    {propS <- "cat"; propS.length(); }; -- 3
    (new TestClass).testLoop(5); -- ~32
    if isvoid propNoInit then 1 else 0 fi; -- 1
    if 10 = 10 then 1 else 0 fi; -- 1
    propI <- 77;
    if propI = 77 then 77 else 0 fi; -- 77
    if "abc" = "a".concat("b").concat("c") then 99 else 0 fi; -- 99
    (
      let b: B <- new C, a:A <- b in 
      if a = b then 88 else 0 fi
    ); -- 88
    if "x" = "y" then 0 else 11111 fi; -- 11111
    if false = false then 6666 else 0 fi; -- 6666
    (let void1: IO, void2: X in 
    if void1 = void2 then 1010101 else 0 fi -- 1010101
    );
    (
      case 10 of 
        i: Int => new C;
        s: String => new B;
        o: Object => new A;
      esac
    ).retStr().length(); -- 3
    (
      case self of 
        i: Int => new C;
        s: String => new B;
        o: Object => new A;
      esac
    ).retStr().length(); -- 1
    (
      case new C of 
        a: A => new A;
        b: B => new B;
        c: C => new C;
      esac
    ).retStr().length(); -- 3
    (
      case new B of 
        a: A => new A;
        b: B => new B;
        c: C => new C;
      esac
    ).retStr().length(); -- 2
    if defaultStr = "" then 898989 else 0  fi;-- 898989
    if defaultInt = 0 then 7373 else 0  fi;-- 7373
    if defaultBool then 0 else 1212  fi;-- 1212
    if isvoid defaultBool then 0 else 434343 fi; -- 434343
    }
  };
};
*)

(* models one-dimensional cellular automaton on a circle of finite radius
   arrays are faked as Strings,
   X's respresent live cells, dots represent dead cells,
   no error checking is done *)
class CellularAutomaton inherits IO {
    population_map : String;
   
    init(map : String) : SELF_TYPE {
        {
            population_map <- map;
            self;
        }
    };
   
    print() : SELF_TYPE {
        {
            out_string(population_map.concat("\n"));
            self;
        }
    };
   
    num_cells() : Int {
        population_map.length()
    };
   
    cell(position : Int) : String {
        population_map.substr(position, 1)
    };
   
    cell_left_neighbor(position : Int) : String {
        if position = 0 then
            cell(num_cells() - 1)
        else
            cell(position - 1)
        fi
    };
   
    cell_right_neighbor(position : Int) : String {
        if position = num_cells() - 1 then
            cell(0)
        else
            cell(position + 1)
        fi
    };
   
    (* a cell will live if exactly 1 of itself and it's immediate
       neighbors are alive *)
    cell_at_next_evolution(position : Int) : String {
        if (if cell(position) = "X" then 1 else 0 fi
            + if cell_left_neighbor(position) = "X" then 1 else 0 fi
            + if cell_right_neighbor(position) = "X" then 1 else 0 fi
            = 1)
        then
            "X"
        else
            "."
        fi
    };
   
    evolve() : SELF_TYPE {
        (let position : Int in
        (let num : Int <- num_cells() in
        (let temp : String in
            {
                while position < num loop
                    {
                        temp <- temp.concat(cell_at_next_evolution(position));
                        position <- position + 1;
                    }
                pool;
                population_map <- temp;
                self;
            }
        ) ) )
    };
};

class Main {
    cells : CellularAutomaton;
   
    main() : SELF_TYPE {
        {
            cells <- (new CellularAutomaton).init("         X         ");
            cells.print();
            (let countdown : Int <- 20 in
                while 0 < countdown loop
                    {
                        cells.evolve();
                        cells.print();
                        countdown <- countdown - 1;
                    }
                pool
            );
            self;
        }
    };
};
